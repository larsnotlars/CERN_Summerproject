selection:
   ### use `&`, `|`, `~` for logical operations on numpy arrays
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression

new_variables:
   ### [format] name: formula
   ### can use functions from `math`, `np` (numpy), and `awkward` in the expression
   part_px:  pfcand_pt * np.cos(jet_phi + pfcand_phirel)
   part_py:  pfcand_pt * np.sin(jet_phi + pfcand_phirel)
   part_pz:  pfcand_pt * np.sinh(jet_eta + pfcand_etarel)
   #part_pt_log: pfcand_pt_log
   part_energy: np.sqrt(pfcand_mass**2 + pfcand_pt**2) * np.cosh(jet_eta + pfcand_etarel)
   part_e_log: np.log(part_energy)
   #part_logptrel: pfcand_ptrel_log
   #part_logerel: pfcand_erel_log
   # part_deltaR: pfcand_deltaR
   # part_charge: pfcand_charge
   # part_isChargedHadron: pfcand_isChargedHad
   # part_isNeutralHadron: pfcand_isNeutralHad
   # part_isPhoton: pfcand_isGamma
   # part_isElectron: pfcand_isEl
   # part_isMuon: pfcand_isMu
   # part_d0: pfcand_dxy
   # part_d0err: pfcand_dxydxy
   # part_dz: pfcand_dz
   # part_dzerr: pfcand_dzdz
   # part_deta: pfcand_etarel
   # part_dphi: pfcand_phirel
   part_mask: ak.ones_like(part_energy)

preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  data_fraction: 0.5

inputs:
   pf_points:
      length: 128
      pad_mode: wrap
      vars: 
         - [pfcand_etarel, null]
         - [pfcand_phirel, null]
   pf_features:
      length: 128
      pad_mode: wrap
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [pfcand_pt_log, 1.7, 0.7]
         - [part_e_log, 2.0, 0.7]
         - [pfcand_ptrel_log, -4.7, 0.7]
         - [pfcand_erel_log, -4.7, 0.7]
         - [pfcand_deltaR, 0.2, 4.0]
         - [pfcand_charge, null]
         - [pfcand_isChargedHad, null]
         - [pfcand_isNeutralHad, null]
         - [pfcand_isGamma, null]
         - [pfcand_isEl, null]
         - [pfcand_isMu, null]
         - [pfcand_dxy, null]
         - [pfcand_dxydxy, 0, 1, 0, 1]
         - [pfcand_dz, null]
         - [pfcand_dzdz, 0, 1, 0, 1]
         - [pfcand_etarel, null]
         - [pfcand_phirel, null]
   pf_vectors:
      length: 128
      pad_mode: wrap
      vars: 
         - [part_px, null]
         - [part_py, null]
         - [part_pz, null]
         - [part_energy, null]
   pf_mask:
      length: 128
      pad_mode: constant
      vars: 
         - [part_mask, null]

labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   type: simple
   value: [label_tt,label_ll]
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)

observers:


weights:
